# All the parameters are customizable by an user. All the values set are placeholders, since the user will have the choice to edit them before creating the Stack. This Parameters can be seen as Environment Variables for the stack.

Parameters:

  EcsClusterName:
    Type: String
    Default: ENV-module
    Description: Name of the cluster

  Role:
    Type: String
    Default: ''
    Description: >-
      (Optional) An IAM role to give the service's containers if the code within
      needs to access other AWS resources like S3 buckets, DynamoDB tables, etc
 
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

  ContainerServiceName:
    Type: String
    Default: webapp
    Description: A name for the service

  DockerImage:
    Type: String
    Default: nginx
    Description: >-
      The docker image ref, it could be a Docker ECR Repository URI or a
      standard Dockerhub image

  HealthCheckGracePeriodSeconds:
    Type: String
    Default: 180

  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding to

  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU

  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container

  SourceCidr:
    Type: String
    Description: >-
      Optional - CIDR/IP range for EcsPort and ContainerPort - defaults to
      0.0.0.0/0
    Default: 0.0.0.0/0

  VPC:
    Type: String
    Description: Id of the VPC

  Subnet1Id:
    Type: String
    Description: Id of the Subnet

  Subnet2Id:
    Type: String
    Description: Id of the Subnet


#Resources are the real services/applications built by our Stack. These resources require the parameters declared before.

Resources:

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Join
        - '-'
        - - !Ref EcsClusterName
          - !Ref EnvType
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 48c73587-7802-47c3-bdb1-5feae716e743

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Join
        - '-'
        - - !Ref EcsClusterName
          - !Ref EnvType
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref Role
      TaskRoleArn: !Ref Role
      ContainerDefinitions:
        - Name: !Ref ContainerServiceName
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref DockerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join
                - '-'
                - - !Ref EcsClusterName
                  - !Ref EnvType
              awslogs-region: us-east-1
              awslogs-stream-prefix: !Join
                - '-'
                - - !Ref EcsClusterName
                  - !Ref EnvType
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 63a3cdfd-32ba-4e1c-b51f-5354d49579f5

  EcsElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - ELB
      SecurityGroups:
        - !Ref EcsSecurityGroup
      Subnets:
        - !Ref Subnet1Id
        - !Ref Subnet2Id
      Scheme: internet-facing
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d8a3f351-c0a9-4586-b1c3-cd456d7670c5

  PublicLoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref EcsElasticLoadBalancer
      Port: !Ref ContainerPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupPublic
    DependsOn:
      - TargetGroupPublic
      - EcsElasticLoadBalancer
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 478f4ccb-6346-4e5d-aed7-b267b29bbd7c

  EcsService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !Ref Subnet1Id
      LoadBalancers:
        - ContainerName: !Ref ContainerServiceName
          ContainerPort: '80'
          TargetGroupArn: !Ref TargetGroupPublic
      ServiceName: !Join
        - '-'
        - - !Ref EcsClusterName
          - !Ref EnvType
    DependsOn:
      - ECSCluster
      - TaskDefinition
      - PublicLoadBalancerListener
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 4af87866-85eb-4850-bef8-e050ab840370

  TargetGroupPublic:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref VPC
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
    DependsOn: EcsElasticLoadBalancer
    Metadata:
      'AWS::CloudFormation::Designer':
        id: edd8aacb-9ea2-4f44-8180-a0d720a0c405

  EcsSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Ref SourceCidr

  EcsSecurityGroupOutbound:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      CidrIp: !Ref SourceCidr
      GroupId: !Ref EcsSecurityGroup

  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref VPC
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 44b5b0f4-abca-42d7-806c-3586fe6809d0

  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref EcsClusterName
          - !Ref EnvType
      RetentionInDays: 7
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7d7d02ec-ba16-41cd-b11f-046129c6c2d1


Outputs:

  Version:
    Description: ECS Cloudformation template version
    Value: 3.0.0

  StackName:
    Value: !Ref 'AWS::StackName'

  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - PublicListener

  EcsSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref EcsSecurityGroup
    Export:
      Name: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - EcsSecurityGroup
